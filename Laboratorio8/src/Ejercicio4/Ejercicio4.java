package Ejercicio4;

import Ejercicio1.EjercicioInterface;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author Grupo 1 - Laboratorio 8 - Ejercicio 4
 */

/*
 * Clase que representa una aplicación Java para calcular el sueldo bruto de los empleados.
 */
public class Ejercicio4 extends javax.swing.JFrame implements EjercicioInterface{
    ArrayList<String> nombre;
    ArrayList<Double> horas;
    ArrayList<Double> tarifa;
    
    /*
     * Constructor de la clase Ejercicio4
     */
    public Ejercicio4() {
        initComponents();
        nombre = new ArrayList<>();
        horas = new ArrayList<>();
        tarifa = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        etiqueta_nombre = new javax.swing.JLabel();
        etiqueta_tarifa = new javax.swing.JLabel();
        etiqueta_horas = new javax.swing.JLabel();
        etiqueta_titulo = new javax.swing.JLabel();
        texto_horas = new javax.swing.JTextField();
        texto_nombre = new javax.swing.JTextField();
        texto_tarifa = new javax.swing.JTextField();
        boton_calcular = new javax.swing.JButton();
        boton_agregar = new javax.swing.JButton();
        boton_vaciar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        etiqueta_nombre.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        etiqueta_nombre.setText("Nombre del empleado: ");

        etiqueta_tarifa.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        etiqueta_tarifa.setText("Tarifa por hora:");

        etiqueta_horas.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        etiqueta_horas.setText("Horas trabajadas:");

        etiqueta_titulo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        etiqueta_titulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        etiqueta_titulo.setText("Sueldos de empleados");

        texto_horas.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        texto_nombre.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        texto_tarifa.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        texto_tarifa.setToolTipText("");

        boton_calcular.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        boton_calcular.setText("Calcular");
        boton_calcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_calcularActionPerformed(evt);
            }
        });

        boton_agregar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        boton_agregar.setText("Agregar");
        boton_agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_agregarActionPerformed(evt);
            }
        });

        boton_vaciar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        boton_vaciar.setText("Vaciar");
        boton_vaciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_vaciarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(etiqueta_titulo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(etiqueta_horas)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(boton_agregar, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(95, 95, 95)
                            .addComponent(boton_calcular, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(boton_vaciar, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(etiqueta_nombre)
                                .addComponent(etiqueta_tarifa))
                            .addGap(27, 27, 27)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(texto_horas, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(texto_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(texto_tarifa, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(etiqueta_titulo)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(etiqueta_nombre)
                    .addComponent(texto_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(etiqueta_horas)
                    .addComponent(texto_horas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(etiqueta_tarifa)
                    .addComponent(texto_tarifa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boton_calcular, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(boton_agregar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(boton_vaciar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Maneja el evento de hacer clic en el botón "Calcular". Calcula y muestra 
     * el sueldo bruto de los empleados si los datos son válidos, o muestra un 
     * mensaje de error si no se ha ingresado bien la información.
     */
    private void boton_calcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_calcularActionPerformed
       if (es_valido(nombre) && es_valido(horas) && es_valido(tarifa)){
            mostrarResultado();
       }
       else{
            JOptionPane.showMessageDialog(null, "No se ha ingresado nada hasta ahora!", "ERROR_MESSAGE", JOptionPane.ERROR_MESSAGE);
       }
    }//GEN-LAST:event_boton_calcularActionPerformed

    /**
     * Obtiene y almacena los datos de un empleado si la información es válida, 
     * o muestra un mensaje de error si las entradas son inválidas.
     */
    private void boton_agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_agregarActionPerformed
        recibirDatos();
    }//GEN-LAST:event_boton_agregarActionPerformed
    
    /**
     * Maneja el evento de hacer clic en el botón "Vaciar". Limpia todas las 
     * listas y los campos de entrada, y muestra un mensaje de confirmación 
     * de que se han vaciado los datos de sueldos.
     */
    private void boton_vaciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_vaciarActionPerformed
        nombre.clear();
        horas.clear();
        tarifa.clear();
        texto_nombre.setText("");
        texto_horas.setText("");
        texto_tarifa.setText("");
        JOptionPane.showMessageDialog(null, "Se ha vaciado la lista de sueldos");
    }//GEN-LAST:event_boton_vaciarActionPerformed

    /**
     * Verifica si una entrada es válida (no está vacía).
     *
     * @param entrada La cadena de entrada a validar.
     * @return true si la entrada es válida, false de lo contrario.
     */
   private boolean entrada_valida(String entrada){
        return !entrada.isEmpty();
    }
    
    /**
     * Verifica si una cadena es un número válido.
     *
     * @param entrada La cadena que se desea comprobar.
     * @return true si la cadena es un número válido, false si no lo es.
     */
    private boolean numero_valido(String entrada){
        if (entrada_valida(entrada)){
            try {
                Double.parseDouble(entrada);  
                return true;
            } catch(NumberFormatException e){  
                return false;  
            }  
        }
        return false;
    }
    
    /**
     * Comprueba si una lista está vacía.
     *
     * @param array La lista que se desea comprobar.
     * @return true si la lista está vacía, false si contiene elementos.
     */
    private boolean es_valido(ArrayList array){
        return !array.isEmpty();
    }

    /**
     * Calcula el sueldo bruto para un empleado en una posición específica.
     *
     * @param posicion La posición del empleado en las listas.
     * @return El sueldo bruto del empleado.
     */
    public double calcular(int posicion){
        double ordinaria = Math.min(40, horas.get(posicion));
        double extra = Math.max(0, horas.get(posicion) - 40);
        return ordinaria*tarifa.get(posicion) + extra*tarifa.get(posicion)*1.5;
    }

    /**
     * Muestra los los sueldos brutos de los empleados utilizando JOptionPane.
     */
    @Override
    public void mostrarResultado(){
        ArrayList<String> lista_sueldo = new ArrayList<>();
        for(int i = 0; i < nombre.size(); i++){
            double sueldo = calcular(i);
            lista_sueldo.add(nombre.get(i) + ": " + sueldo);
        }
        String resultado = "";
        for(String s : lista_sueldo){
            resultado += s + "\n";
        }
        JOptionPane.showMessageDialog(null, String.format("La lista de sueldo es:\n%s", resultado));
    }
    /**
     * Obtiene y almacena los datos ingresados del empleado en las listas, 
     * luego muestra un mensaje de confirmación.
     */
    @Override
    public void recibirDatos(){
        if (entrada_valida(texto_nombre.getText()) && numero_valido(texto_horas.getText()) && numero_valido(texto_tarifa.getText())){
            nombre.add(texto_nombre.getText());
            horas.add(Double.parseDouble(texto_horas.getText()));
            tarifa.add(Double.parseDouble(texto_tarifa.getText()));
            JOptionPane.showMessageDialog(null, "Se ha agregado correctamente!");
            texto_nombre.setText("");
            texto_horas.setText("");
            texto_tarifa.setText("");
        }
        else{
            JOptionPane.showMessageDialog(null, "Entradas inválidas!", "ERROR_MESSAGE", JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ejercicio4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ejercicio4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ejercicio4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ejercicio4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Ejercicio4().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boton_agregar;
    private javax.swing.JButton boton_calcular;
    private javax.swing.JButton boton_vaciar;
    private javax.swing.JLabel etiqueta_horas;
    private javax.swing.JLabel etiqueta_nombre;
    private javax.swing.JLabel etiqueta_tarifa;
    private javax.swing.JLabel etiqueta_titulo;
    private javax.swing.JTextField texto_horas;
    private javax.swing.JTextField texto_nombre;
    private javax.swing.JTextField texto_tarifa;
    // End of variables declaration//GEN-END:variables
}
